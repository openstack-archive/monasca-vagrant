#!/usr/bin/env python

DOCUMENTATION = '''
---
module: monasca_alarm_definition
short_description: crud operations on Monasca alarm definitions
description:
    - Performs crud operations (create/update/delete) on monasca alarm definitions
    - Monasca project homepage - https://wiki.openstack.org/wiki/Monasca
author: Tim Kuhlman <tim@backgroundprocess.com>
requirements: [ python-monascaclient ]
options:
    api_version:
        required: false
        default: '2_0'
        description:
            - The monasca api version.
    description:
        required: false
        description:
            - The description associated with the alarm
    expression:
        required: false
        description:
            - The alarm expression, required for create/update operations.
    keystone_password:
        required: true
        description:
            - Keystone password to use for authentication.
    keystone_url:
        required: true
        description:
            - Keystone url to authenticate against. Example http://192.168.10.5:5000/v3
    keystone_user:
        required: true
        description:
            - Keystone user to log in as.
    monasca_api_url:
        required: false
        description:
            - If unset the service endpoing registered with keystone will be used.
    name:
        required: true
        description:
            - The alarm definition name
    severity:
        required: false
        default: "LOW"
        description:
            - The severity set for the alarm must be LOW, MEDIUM, HIGH or CRITICAL
    state:
        required: false
        default: "present"
        choices: [ present, absent ]
        description:
            - Whether the account should exist.  When C(absent), removes the user account.
'''

EXAMPLES = '''
monasca_alarm: expression='avg(cpu.idle_perc) < 10 times 3' state=present name='High CPU Usage'
               keystone_url=http://localhost:5000/v3.0 keystone_user=admin keystone_password=password
'''

from ansible.module_utils.basic import *

try:
    from monascaclient import client
    from monascaclient import ksclient
    import requests
except ImportError:
    monascaclient_found = False
else:
    monascaclient_found = True

# Todo support check_mode
#        ),
#        supports_check_mode=True
# todo support setting alarm actions
# todo keep the keystone token across multiple runs


def main():
    module = AnsibleModule(
        argument_spec=dict(
            api_version=dict(required=False, default='2_0', type='str'),
            description=dict(required=False, type='str'),
            expression=dict(required=False, type='str'),
            keystone_password=dict(required=True, type='str'),
            keystone_url=dict(required=True, type='str'),
            keystone_user=dict(required=True, type='str'),
            monasca_api_url=dict(required=False, type='str'),
            name=dict(required=True, type='str'),
            severity=dict(default='LOW', type='str'),
            state=dict(default='present', choices=['present', 'absent'], type='str')
        )
    )

    name = module.params['name']
    expression = module.params['expression']

    if not monascaclient_found:
        module.fail_json(msg="python-monascaclient >= 1.0.9 is required")

    # Authenticate to Keystone
    ks = ksclient.KSClient(auth_url=module.params['keystone_url'], username=module.params['keystone_user'],
                           password=module.params['keystone_password'])

    # construct the mon client
    if module.params['monasca_api_url'] is None:
        api_url = ks.monasca_url
    else:
        api_url = module.params['monasca_api_url']
    monasca = client.Client(module.params['api_version'], api_url, token=ks.token)

    # Find existing definitions
    definitions = {definition['name']: definition for definition in monasca.alarm_definitions.list()}

    if module.params['state'] == 'absent':
        if name not in definitions.keys():
            module.exit_json(changed=False)

        resp = monasca.alarm_definitions.delete(alarm_id=definitions[name].id)
        if resp.status_code == requests.codes.ok:
            module.exit_json(changed=True)
        else:
            module.fail_json(msg=resp.text)
    else:  # Only other option is state=present
        def_kwargs = {"name": name, "description": module.params['description'], "expression": expression,
                               "match_by": ["hostname"], "severity": module.params['severity']}

        if name in definitions.keys():
            if definitions[name]['expression'] == expression:
                module.exit_json(changed=False)
            body = monasca.alarm_definitions.patch(**def_kwargs)
        else:
            body = monasca.alarm_definitions.create(**def_kwargs)

        if 'id' in body:
            module.exit_json(changed=True)
        else:
            module.fail_json(msg=body)


if __name__ == "__main__":
    main()
